{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","emailEditorRef","useRef","style","padding","width","display","justifyContent","onClick","current","editor","exportHtml","data","design","html","console","log","saveDesign","overflow","ref","minHeight","border","fontFamily","onLoad","templateJson","Object","keys","length","loadDesign","locale","safeHtml","appearance","theme","panels","tools","dock","divider","enabled","heading","position","button","usageLimit","properties","buttonColors","value","color","backgroundColor","hoverColor","hoverBackgroundColor","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLA2GeA,EAvGH,WACV,IAAMC,EAAiBC,iBAAO,MA4B9B,OACE,gCACE,yCACA,sBACEC,MAAO,CACLC,QAAS,OACTC,MAAO,MACPC,QAAS,OACTC,eAAgB,gBALpB,UAQE,wBAAQC,QArCK,WACjBP,EAAeQ,QAAQC,OAAOC,YAAW,SAACC,GACfA,EAAjBC,OAAiBD,EAATE,KAChBC,QAAQC,IAAIJ,OAkCV,yBACA,wBAAQJ,QAnBD,WACXP,EAAeQ,QAAQC,OAAOO,YAAW,SAACL,GAExCG,QAAQC,IAAIJ,OAgBV,4BAGF,qBACET,MAAO,CACLE,MAAO,OACPa,SAAU,UAHd,SAME,cAAC,IAAD,CACEC,IAAKlB,EACLmB,UAAU,QACVjB,MAAO,CAAEkB,OAAQ,iBAAkBC,WAAY,SAC/CC,OA3CO,WAGb,IAAMC,EAAe,GAKrB,OAHyC,IAArCC,OAAOC,KAAKF,GAAcG,QAC5B1B,EAAeQ,QAAQC,OAAOkB,WAAWJ,GAEpC,MAqCDK,OAAO,KACPC,UAAU,EACVC,WAAY,CACVC,MAAO,OACPC,OAAQ,CACNC,MAAO,CACLC,KAAM,UAIZD,MAAO,CACLE,QAAS,CAEPC,SAAS,GAEXC,QAAS,CAEPC,SAAU,GAEZC,OAAQ,CAENC,WAAY,EACZC,WAAY,CAEVC,aAAc,CACZC,MAAO,CACLC,MAAO,OACPC,gBAAiB,UACjBC,WAAY,UACZC,qBAAsB,YAG1B5C,QAAS,CACPwC,MAAO,aAETK,UAAW,CACTL,MAAO,qBCpFVM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7d0e5ed5.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport EmailEditor from \"react-email-editor\";\n\nconst App = () => {\n  const emailEditorRef = useRef(null);\n\n  const exportHtml = () => {\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design, html } = data;\n      console.log(data);\n      // console.log(\"exportHtml\", html);\n    });\n  };\n\n  const onLoad = () => {\n    // how to save to our server and call back designs: https://docs.unlayer.com/docs/templates\n    // we will need to save the template in JSON format to the marketing API, then call it back in JSON format to show the user an existing template - for editing\n    const templateJson = {};\n\n    if (Object.keys(templateJson).length !== 0) {\n      emailEditorRef.current.editor.loadDesign(templateJson);\n    }\n    return null;\n  };\n\n  const save = () => {\n    emailEditorRef.current.editor.saveDesign((data) => {\n      // this data is just the design part of the JSON\n      console.log(data);\n    });\n  };\n\n  return (\n    <div>\n      <h1>Unlayer</h1>\n      <div\n        style={{\n          padding: \"10px\",\n          width: \"33%\",\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <button onClick={exportHtml}>Export HTML</button>\n        <button onClick={save}>Save Design</button>\n      </div>\n\n      <div\n        style={{\n          width: \"100%\",\n          overflow: \"scroll\",\n        }}\n      >\n        <EmailEditor\n          ref={emailEditorRef}\n          minHeight=\"500px\"\n          style={{ border: \"1px solid blue\", fontFamily: \"Arial\" }}\n          onLoad={onLoad}\n          // locale=\"it\"\n          locale=\"en\"\n          safeHtml={true}\n          appearance={{\n            theme: \"dark\",\n            panels: {\n              tools: {\n                dock: \"left\",\n              },\n            },\n          }}\n          tools={{\n            divider: {\n              // whether a tool is visible or not\n              enabled: false,\n            },\n            heading: {\n              // position of tool in the tools dock\n              position: 1,\n            },\n            button: {\n              // how many times you can use an item\n              usageLimit: 1,\n              properties: {\n                // changes default properties of tool\n                buttonColors: {\n                  value: {\n                    color: \"#000\",\n                    backgroundColor: \"#3AAEE0\",\n                    hoverColor: \"#FFFFFF\",\n                    hoverBackgroundColor: \"#3AAEE0\",\n                  },\n                },\n                padding: {\n                  value: \"10px 20px\",\n                },\n                textAlign: {\n                  value: \"center\",\n                },\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}