{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","emailEditorRef","useRef","layout","current","editor","addEventListener","data","console","log","blocks","category","tags","cells","columns","contents","type","values","containerPadding","headingType","fontFamily","label","value","fontSize","textAlign","lineHeight","linkStyle","inherit","linkColor","linkHoverColor","linkUnderline","linkHoverUnderline","_meta","htmlClassNames","selectable","draggable","duplicatable","deletable","hideable","text","href","name","target","buttonColors","color","backgroundColor","hoverColor","hoverBackgroundColor","size","autoWidth","width","padding","border","borderRadius","displayCondition","columnsBackgroundColor","backgroundImage","url","fullWidth","repeat","center","cover","hideDesktop","displayMode","registerProvider","params","done","registerCallback","newBlock","existingBlock","style","display","justifyContent","onClick","exportHtml","design","html","saveDesign","overflow","ref","projectId","id","minHeight","onLoad","Object","keys","length","loadDesign","JSON","parse","locale","safeHtml","appearance","theme","panels","tools","dock","options","user","email","divider","heading","position","button","properties","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAsSeA,EAlSH,WAAO,IAAD,oBACVC,EAAiBC,iBAAO,MAqBxBC,EAAS,GAsBD,OAAdF,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiCC,iBAAiB,iBAAiB,SAACC,GAElEC,QAAQC,IAAIF,MAGd,IAAIG,EAAS,CACX,CACEC,SAAU,OACVC,KAAM,CAAC,QACPL,KAAM,CACJM,MAAO,CAAC,GACRC,QAAS,CACP,CACEC,SAAU,CACR,CACEC,KAAM,UACNC,OAAQ,CACNC,iBAAkB,OAClBC,YAAa,KACbC,WAAY,CACVC,MAAO,QACPC,MAAO,8BAETC,SAAU,OACVC,UAAW,OACXC,WAAY,OACZC,UAAW,CACTC,SAAS,EACTC,UAAW,UACXC,eAAgB,UAChBC,eAAe,EACfC,oBAAoB,GAEtBC,MAAO,CACLC,eAAgB,qBAElBC,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,UAAU,EACVC,KAAM,YAGV,CACEvB,KAAM,SACNC,OAAQ,CACNC,iBAAkB,OAClBsB,KAAM,CACJC,KAAM,MACNxB,OAAQ,CACNuB,KAAM,GACNE,OAAQ,WAGZC,aAAc,CACZC,MAAO,UACPC,gBAAiB,UACjBC,WAAY,UACZC,qBAAsB,WAExBC,KAAM,CACJC,WAAW,EACXC,MAAO,QAET1B,UAAW,SACXC,WAAY,OACZ0B,QAAS,YACTC,OAAQ,GACRC,aAAc,MACdrB,MAAO,CACLC,eAAgB,oBAElBC,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,UAAU,EACVC,KAAM,4EAIZtB,OAAQ,CACNe,MAAO,CACLC,eAAgB,eAKxBhB,OAAQ,CACNqC,iBAAkB,KAClBxC,SAAS,EACT+B,gBAAiB,GACjBU,uBAAwB,GACxBC,gBAAiB,CACfC,IAAK,GACLC,WAAW,EACXC,QAAQ,EACRC,QAAQ,EACRC,OAAO,GAETV,QAAS,MACTW,aAAa,EACb9B,MAAO,CACLC,eAAgB,SAElBC,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,UAAU,IAGdyB,YAAa,UAiDjB,OA7Cc,OAAd9D,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiC2D,iBAC/B,UACA,SAAUC,EAAQC,GAChB1D,QAAQC,IAAI,kBAAmBwD,GAC/BC,EAAKxD,MAKK,OAAdT,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiC8D,iBAC/B,eACA,SAAUC,EAAUF,GAClB1D,QAAQC,IAAI,cAAe2D,GAM3BF,EAAKE,MAIK,OAAdnE,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiC8D,iBAC/B,kBACA,SAAUE,EAAeH,GACvB1D,QAAQC,IAAI,iBAAkB4D,GAK9BH,EAAKG,MAIK,OAAdpE,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiC8D,iBAC/B,iBACA,SAAUE,EAAeH,GACvB1D,QAAQC,IAAI,gBAAiB4D,GAI7BH,EAAKG,MAKP,gCACE,yCACA,sBACEC,MAAO,CACLnB,QAAS,OACTD,MAAO,MACPqB,QAAS,OACTC,eAAgB,gBALpB,UAQE,wBAAQC,QAtNK,WACjBxE,EAAeG,QAAQC,OAAOqE,YAAW,SAACnE,GACfA,EAAjBoE,OAAiBpE,EAATqE,KAChBpE,QAAQC,IAAIF,OAmNV,yBACA,wBAAQkE,QArLD,WACXxE,EAAeG,QAAQC,OAAOwE,YAAW,SAACtE,GAExCC,QAAQC,IAAIF,OAkLV,4BAGF,qBACE+D,MAAO,CACLpB,MAAO,OACP4B,SAAU,UAHd,SAME,cAAC,IAAD,CACEC,IAAK9E,EACL+E,UAAW,MACXC,GAAG,SACHC,UAAU,QACVZ,MAAO,CAAElB,OAAQ,iBAAkBhC,WAAY,SAC/C+D,OAjNe,WAAO,IAAD,IACW,IAAtC,GAAmC,IAA/BC,OAAOC,KAAKlF,GAAQmF,OACtB,cAAOrF,QAAP,IAAOA,GAAP,UAAOA,EAAgBG,eAAvB,iBAAO,EAAyBC,cAAhC,aAAO,EAAiCkF,WAAWC,KAAKC,MAAMtF,IAElD,OAAdF,QAAc,IAAdA,GAAA,UAAAA,EAAgBG,eAAhB,mBAAyBC,cAAzB,SAAiCC,iBAC/B,iBACA,SAACC,GAECC,QAAQC,IAAI,cAAeF,OA2MzBmF,OAAO,KACPC,UAAU,EACVC,WAAY,CACVC,MAAO,OACPC,OAAQ,CACNC,MAAO,CACLC,KAAM,UAIZC,QAAS,CACPC,KAAM,CACJjB,GAAI,EACJxC,KAAM,iBACN0D,MAAO,2BAETzF,OAAQA,GAEVqF,MAAO,CACLK,QAAS,GAITC,QAAS,CAEPC,SAAU,GAEZC,OAAQ,CAGNC,WAAY,CAEV7D,aAAc,CACZrB,MAAO,CACLsB,MAAO,OACPC,gBAAiB,UACjBC,WAAY,UACZC,qBAAsB,YAG1BI,QAAS,CACP7B,MAAO,aAETE,UAAW,CACTF,MAAO,qBC/QVmF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e71e7691.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport EmailEditor from \"react-email-editor\";\n\nconst App = () => {\n  const emailEditorRef = useRef(null);\n\n  const exportHtml = () => {\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design, html } = data;\n      console.log(data);\n      // console.log(\"exportHtml\", html);\n    });\n  };\n\n  const onLoad = () => {\n    // how to save to our server and call back designs: https://docs.unlayer.com/docs/templates\n    // we will need to save the template in JSON format to the marketing API, then call it back in JSON format to show the user an existing template - for editing\n    const templateJson = {};\n\n    if (Object.keys(templateJson).length !== 0) {\n      emailEditorRef.current.editor.loadDesign(templateJson);\n    }\n    return null;\n  };\n\n  const layout = {};\n\n  const onLoadTemplate = () => {\n    if (Object.keys(layout).length !== 0) {\n      return emailEditorRef?.current?.editor?.loadDesign(JSON.parse(layout));\n    }\n    emailEditorRef?.current?.editor?.addEventListener(\n      \"design:loaded\",\n      (data) => {\n        // Design is loaded\n        console.log(\"design load\", data); // design json\n      }\n    );\n  };\n\n  const save = () => {\n    emailEditorRef.current.editor.saveDesign((data) => {\n      // this data is just the design part of the JSON\n      console.log(data);\n    });\n  };\n\n  emailEditorRef?.current?.editor?.addEventListener(\"design:loaded\", (data) => {\n    // Design is loaded\n    console.log(data); // design json\n  });\n\n  let blocks = [\n    {\n      category: \"Test\",\n      tags: [\"tag1\"],\n      data: {\n        cells: [1],\n        columns: [\n          {\n            contents: [\n              {\n                type: \"heading\",\n                values: {\n                  containerPadding: \"10px\",\n                  headingType: \"h1\",\n                  fontFamily: {\n                    label: \"Arial\",\n                    value: \"arial,helvetica,sans-serif\",\n                  },\n                  fontSize: \"22px\",\n                  textAlign: \"left\",\n                  lineHeight: \"140%\",\n                  linkStyle: {\n                    inherit: true,\n                    linkColor: \"#0000ee\",\n                    linkHoverColor: \"#0000ee\",\n                    linkUnderline: true,\n                    linkHoverUnderline: true,\n                  },\n                  _meta: {\n                    htmlClassNames: \"u_content_heading\",\n                  },\n                  selectable: true,\n                  draggable: true,\n                  duplicatable: true,\n                  deletable: true,\n                  hideable: true,\n                  text: \"Heading\",\n                },\n              },\n              {\n                type: \"button\",\n                values: {\n                  containerPadding: \"10px\",\n                  href: {\n                    name: \"web\",\n                    values: {\n                      href: \"\",\n                      target: \"_blank\",\n                    },\n                  },\n                  buttonColors: {\n                    color: \"#FFFFFF\",\n                    backgroundColor: \"#3AAEE0\",\n                    hoverColor: \"#FFFFFF\",\n                    hoverBackgroundColor: \"#3AAEE0\",\n                  },\n                  size: {\n                    autoWidth: true,\n                    width: \"100%\",\n                  },\n                  textAlign: \"center\",\n                  lineHeight: \"120%\",\n                  padding: \"10px 20px\",\n                  border: {},\n                  borderRadius: \"4px\",\n                  _meta: {\n                    htmlClassNames: \"u_content_button\",\n                  },\n                  selectable: true,\n                  draggable: true,\n                  duplicatable: true,\n                  deletable: true,\n                  hideable: true,\n                  text: '<span style=\"font-size: 14px; line-height: 16.8px;\">Button Text</span>',\n                },\n              },\n            ],\n            values: {\n              _meta: {\n                htmlClassNames: \"u_column\",\n              },\n            },\n          },\n        ],\n        values: {\n          displayCondition: null,\n          columns: false,\n          backgroundColor: \"\",\n          columnsBackgroundColor: \"\",\n          backgroundImage: {\n            url: \"\",\n            fullWidth: true,\n            repeat: false,\n            center: true,\n            cover: false,\n          },\n          padding: \"0px\",\n          hideDesktop: false,\n          _meta: {\n            htmlClassNames: \"u_row\",\n          },\n          selectable: true,\n          draggable: true,\n          duplicatable: true,\n          deletable: true,\n          hideable: true,\n        },\n      },\n      displayMode: \"email\",\n    },\n  ];\n\n  emailEditorRef?.current?.editor?.registerProvider(\n    \"blocks\",\n    function (params, done) {\n      console.log(\"blocks provider\", params);\n      done(blocks);\n    }\n  );\n\n  // these call backs would be used to manage on our side\n  emailEditorRef?.current?.editor?.registerCallback(\n    \"block:added\",\n    function (newBlock, done) {\n      console.log(\"block:added\", newBlock);\n\n      // Save the block to your database here\n      // and pass the object to done callback.\n      // Each block should have it's own unique id\n\n      done(newBlock);\n    }\n  );\n\n  emailEditorRef?.current?.editor?.registerCallback(\n    \"block:modified\",\n    function (existingBlock, done) {\n      console.log(\"block:modified\", existingBlock);\n\n      // Update the block in your database here\n      // and pass the updated object to done callback.\n\n      done(existingBlock);\n    }\n  );\n\n  emailEditorRef?.current?.editor?.registerCallback(\n    \"block:removed\",\n    function (existingBlock, done) {\n      console.log(\"block:removed\", existingBlock);\n\n      // Delete the block from your database here.\n\n      done(existingBlock);\n    }\n  );\n\n  return (\n    <div>\n      <h1>Unlayer</h1>\n      <div\n        style={{\n          padding: \"10px\",\n          width: \"33%\",\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <button onClick={exportHtml}>Export HTML</button>\n        <button onClick={save}>Save Design</button>\n      </div>\n\n      <div\n        style={{\n          width: \"100%\",\n          overflow: \"scroll\",\n        }}\n      >\n        <EmailEditor\n          ref={emailEditorRef}\n          projectId={27694}\n          id=\"editor\"\n          minHeight=\"500px\"\n          style={{ border: \"1px solid blue\", fontFamily: \"Arial\" }}\n          onLoad={onLoadTemplate}\n          // locale=\"it\"\n          locale=\"en\"\n          safeHtml={true}\n          appearance={{\n            theme: \"dark\",\n            panels: {\n              tools: {\n                dock: \"left\",\n              },\n            },\n          }}\n          options={{\n            user: {\n              id: 1,\n              name: \"Annika Chauhan\",\n              email: \"a.chauhan@novafutur.com\",\n            },\n            blocks: blocks,\n          }}\n          tools={{\n            divider: {\n              // whether a tool is visible or not\n              // enabled: false,\n            },\n            heading: {\n              // position of tool in the tools dock\n              position: 1,\n            },\n            button: {\n              // how many times you can use an item\n              // usageLimit: 1,\n              properties: {\n                // changes default properties of tool\n                buttonColors: {\n                  value: {\n                    color: \"#000\",\n                    backgroundColor: \"#3AAEE0\",\n                    hoverColor: \"#FFFFFF\",\n                    hoverBackgroundColor: \"#3AAEE0\",\n                  },\n                },\n                padding: {\n                  value: \"10px 20px\",\n                },\n                textAlign: {\n                  value: \"center\",\n                },\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}